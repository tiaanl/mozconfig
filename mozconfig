#!/usr/bin/env python3

import argparse
import os


MOZCONFIG = '.mozconfig'
PREFIX = '{}-'.format(MOZCONFIG)
VERBOSE = False


def enumerate_configs(path):
    configs = []

    for file in os.listdir(path):
        if file.startswith(PREFIX):
            name = file.replace(PREFIX, '', 1)
            configs.append(name)

    return configs


def find_configs(path):
    """
    Find configs in the given [path].  If none is found, return None, otherwise
    return an array with the names of valid configs.
    """
    configs = enumerate_configs(path)

    if configs:
        return (path, configs)

    if path != '/':
        return find_configs(os.path.dirname(path))

    return (None, None)


def link_to_config(root, config):
    target = os.path.join(root, MOZCONFIG)
    source = os.path.join(
        root, '{}{}'.format(PREFIX, config))

    if VERBOSE:
        print('Linking {} to {}'.format(source, target))

    if os.path.exists(target):
        os.unlink(target)
    os.symlink(source, target)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--list',
                        help="show a list of available configs", action='store_true')
    parser.add_argument('-v', '--verbose',
                        help="show verbose output", action='store_true')
    parser.add_argument(
        '-t', '--template',
        help="Create a new configuration based on the specified template",
        default=None)
    parser.add_argument(
        '-r', '--root', default=os.getcwd(), help='the starting directory to find configs')
    parser.add_argument('config', nargs='?', help='the config to use')

    return parser.parse_args()


def create_from_template(root, template):
    templates_root = os.path.join(os.path.dirname(
        os.path.realpath(__file__)), 'templates')
    template_path = os.path.join(templates_root, template)

    if not os.path.exists(template_path):
        print('Template not found, available templates: {}'.format(
            ', '.join([os.path.basename(t)
                      for t in os.listdir(templates_root)])
        ))
        return

    target_path = os.path.join(root, PREFIX + template)

    if os.path.exists(target_path):
        print('Target configuration already exists, delete it before createing a new configuration. ({})'.format(target_path))
        return

    if VERBOSE:
        print('Copying file {} to {}...'.format(template_path, target_path))

    from shutil import copy
    copy(template_path, target_path)


def main():
    args = parse_args()

    # Set some global arguments
    global VERBOSE
    VERBOSE = args.verbose

    (root, configs) = find_configs(os.path.abspath(args.root))
    if not root:
        if VERBOSE:
            print('mozonfig root not found.')
        return

    mozconfig = os.path.join(root, MOZCONFIG)

    link_exists = os.path.exists(mozconfig)

    # Guard against overwriting an existing config file.
    if link_exists and not os.path.islink(mozconfig):
        if VERBOSE:
            print('The current {} file is not a symlink, which points to the configs not being managed by mozconfig'.format(MOZCONFIG))
        return

    current_config = None
    if link_exists:
        current_config = os.path.basename(
            os.readlink(mozconfig)).replace(PREFIX, '')

    if args.config:
        # a config was specified, so try to switch to it.
        if args.config in configs:
            link_to_config(root, args.config)
        else:
            print('Config "{}" not found'.format(args.config))
    elif args.list:
        for config in configs:
            print(config)
    elif args.template:
        create_from_template(args.root, args.template)
    else:
        if current_config is None:
            print('none')
        else:
            print(current_config)


if __name__ == '__main__':
    main()
